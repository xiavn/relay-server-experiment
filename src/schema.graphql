### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type Colour implements Node {
  hexValue: String!
  id: ID!
  localId: Int!
  name: String!
  pantoneValue: String!
  year: Int!
}

type Link implements Node {
  description: String
  id: ID!
  internalId: Int!
  postedBy: User
  url: String
  votes(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): LinkVotes_Connection
}

type LinkEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Link
}

type LinkVotes_Connection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [VoteEdge]
  pageCursors: PageCursors

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type Mutation {
  addVote(linkId: Int!): Vote
  createLink(description: String!, url: String!): Link!
  deleteLink(id: ID!): Link!
  editUser(faveColour: Int, name: String): User!
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, faveColour: Int, name: String!, password: String!): AuthPayload
  updateLink(description: String, id: ID!, url: String): Link!
}

interface Node {
  id: ID!
}

type PageCursor {
  cursor: String!
  isCurrent: Boolean!
  page: Int!
}

type PageCursors {
  """Always includes current page"""
  around: [PageCursor!]!

  """
  Optional, may be included in `around` (if current page is near the beginning).
  """
  first: PageCursor

  """
  Optional, may be included in `around` (if current page is near the end).
  """
  last: PageCursor
  previous: PageCursor
  totalRecords: Int!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  colours: [Colour]!
  feed: [Link!]!
  link(id: Int!): Link
  links(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): QueryLinks_Connection
  node(id: ID!): Node
  user(id: Int!): User
}

type QueryLinks_Connection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [LinkEdge]
  pageCursors: PageCursors

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type User implements Node {
  email: String!
  faveColour: Colour!
  id: ID!
  links(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): UserLinks_Connection!
  name: String!
}

type UserLinks_Connection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [LinkEdge]
  pageCursors: PageCursors

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type Vote implements Node {
  id: ID!
  link: Link
  user: User
}

type VoteEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Vote
}
